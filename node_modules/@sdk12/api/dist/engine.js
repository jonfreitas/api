"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Engine = void 0;
const express_1 = __importStar(require("express"));
const cors_1 = __importDefault(require("cors"));
const body_parser_1 = __importDefault(require("body-parser"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const express_fileupload_1 = __importDefault(require("express-fileupload"));
const morgan_1 = __importDefault(require("morgan"));
const express_graphql_1 = __importDefault(require("express-graphql"));
const express_bearer_token_1 = __importDefault(require("express-bearer-token"));
const graphql_import_1 = require("graphql-import");
const graphql_upload_1 = require("graphql-upload");
const graphql_tools_1 = require("graphql-tools");
const core_1 = require("@sdk12/core");
const tools_1 = require("./tools");
const healthcheck_1 = require("./tools/healthcheck");
const response_1 = require("./tools/response");
const grpc_1 = require("./grpc");
class Engine {
    constructor() {
        this.server = (0, express_1.default)();
        this.static = express_1.static;
        this.graphql = express_graphql_1.default;
        this.routes = [];
        this.configGrpcClient = (remoteServer, protoPath) => {
            return (0, grpc_1.configGrpcClient)(remoteServer, protoPath);
        };
    }
    defaultRoutes(health) {
        const Route = (0, express_1.Router)();
        Route.use('/healthcheck', (0, healthcheck_1.healthCheck)({
            healthy: health,
        }));
        Route.use('*', (_, response) => {
            response.status(404).end('404 - Not found!');
        });
        this.routes.push(Route);
    }
    start(config) {
        const configDefault = {
            context: '',
            healthCheck: () => ({ uptime: (0, core_1.uptimeFormatted)() }),
            enableParsers: true,
        };
        const appConfig = Object.assign(Object.assign({}, configDefault), config);
        const { ACCESS_LOG, CORS = '*', PORT = 3000, PAYLOAD_LIMIT = '64mb', ENABLE_GRAPHQL_UPLOAD = false, } = process.env;
        const corsURLs = CORS.split(',');
        const corsOptions = {
            credentials: true,
            origin: (origin, callback) => callback(null, corsURLs.includes('*') || corsURLs.includes(origin)),
        };
        this.setRoutes(appConfig);
        this.defaultRoutes(appConfig.healthCheck);
        const middlewares = appConfig.enableParsers
            ? [
                body_parser_1.default.json({ limit: PAYLOAD_LIMIT }),
                body_parser_1.default.urlencoded({ extended: true }),
                (0, cookie_parser_1.default)(),
                (0, express_bearer_token_1.default)(),
                !ENABLE_GRAPHQL_UPLOAD && (0, express_fileupload_1.default)({ limit: PAYLOAD_LIMIT }),
            ].filter(Boolean)
            : [];
        middlewares.push((0, cors_1.default)(corsOptions));
        middlewares.push(response_1.JsonError);
        if (ACCESS_LOG)
            middlewares.push((0, morgan_1.default)(ACCESS_LOG));
        this.server.use(middlewares);
        this.server.use(appConfig.context, this.routes);
        this.server.listen(PORT, () => {
            console.log(`\n\nðŸš€ API Plurall voando na porta ${PORT}`);
        });
    }
    setRoutes(config) {
        config.routes.forEach((router) => {
            switch (router.type) {
                case 'graphql':
                    this.parseGraphQL(router);
                    break;
                case 'rest':
                default:
                    this.parseRest(router);
                    break;
            }
        });
    }
    parseRest(router) {
        router.getRoutes().forEach((route) => {
            const Route = (0, express_1.Router)();
            Route[route.method || 'use'](route.pattern, route.action);
            this.routes.push(Route);
        });
    }
    parseGraphQL(router) {
        router.getRoutes().forEach((route) => {
            var _a;
            tools_1.logger.info(`Criada a rota "${route.pattern}"`);
            const Route = (0, express_1.Router)();
            const typeDefs = (0, graphql_import_1.importSchema)(`${route.router.path}/${route.router.schemaFile}`);
            const resolvers = route.router.getResolver();
            route.router.schema = (0, graphql_tools_1.makeExecutableSchema)({ typeDefs, resolvers });
            (_a = router.customDirectives) === null || _a === void 0 ? void 0 : _a.forEach(({ name, directive }) => {
                route.router.schema = directive(route.router.schema, name);
            });
            if (router.rootResolveFn) {
                (0, graphql_tools_1.addSchemaLevelResolveFunction)(route.router.schema, router.rootResolveFn);
            }
            const { ENABLE_GRAPHQL_UPLOAD = false } = process.env;
            const graphqlMiddleware = [
                ENABLE_GRAPHQL_UPLOAD && (0, graphql_upload_1.graphqlUploadExpress)(router.graphqlUpload),
            ].filter(Boolean);
            if (graphqlMiddleware.length) {
                Route.use(route.pattern, ...graphqlMiddleware);
            }
            Route[route.method || 'use'](route.pattern, this.graphql(route.router));
            this.routes.push(Route);
        });
    }
}
exports.Engine = Engine;
//# sourceMappingURL=engine.js.map