"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const perf_hooks_1 = require("perf_hooks");
class TimeTrace {
    constructor(timeTracing) {
        this.enabled = false;
        this.timesList = {};
        this.measurements = {};
        this.measure = (name, start, end) => {
            if (!this.enabled || !this.timesList[start]) {
                return;
            }
            this.measurements[name] = {
                duration: `${this.diffMarks(start, end)} ms`,
                source: this.debugLine(),
            };
        };
        this.measuresToJSON = () => {
            if (!this.enabled) {
                return 'Disabled';
            }
            return JSON.stringify(Object.keys(this.measurements).map((key) => (Object.assign(Object.assign({}, this.measurements[key]), { measure: key }))));
        };
        this.logMeasure = () => `${new Date()} Data Exchange Time Trace: ${this.measuresToJSON()}`;
        this.timesList = {};
        this.measurements = {};
        this.enabled = timeTracing;
    }
    mark(name) {
        if (!this.enabled) {
            return;
        }
        this.timesList[name] = { name, time: perf_hooks_1.performance.now() };
    }
    debugLine() {
        return new Error().stack.split('\n')[3].replace(/\s+at /gi, '');
    }
    /**
     *
     * @param start Time when the event started
     * @param end   Time when the event ended
     *
     * @returns The difference in ms
     */
    diffMarks(start, end) {
        var _a, _b;
        const before = this.timesList[start].time;
        const after = (_b = (_a = this.timesList[end]) === null || _a === void 0 ? void 0 : _a.time) !== null && _b !== void 0 ? _b : perf_hooks_1.performance.now();
        return (before - after).toFixed(3);
    }
}
class TimeTraceSingleton {
    constructor() {
        if (!TimeTraceSingleton.instance) {
            TimeTraceSingleton.instance = new TimeTrace({});
        }
    }
    getInstance() {
        return TimeTraceSingleton.instance;
    }
}
exports.default = TimeTraceSingleton;
//# sourceMappingURL=performance.js.map