"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configGrpcClient = exports.getServiceClientFromProto = exports.getPackageString = void 0;
const fs_1 = __importDefault(require("fs"));
const proto_loader_1 = require("@grpc/proto-loader");
const grpc_js_1 = require("@grpc/grpc-js");
const getPackageString = (pathProto) => {
    const readProtoService = fs_1.default.readFileSync(pathProto).toString();
    return [
        `${readProtoService.match(/(?<=package\s)(.*[a-zA-Z0-9])/g)}`,
        `${readProtoService.match(/(?<=service\s)(.*)(?=\s{)/g)}`,
    ].join('.');
};
exports.getPackageString = getPackageString;
const getServiceClientFromProto = (pathProto, packageString = '') => {
    const packageDefinition = (0, proto_loader_1.loadSync)(pathProto, { keepCase: true });
    const packageObject = (0, grpc_js_1.loadPackageDefinition)(packageDefinition);
    const packageStringName = packageString === '' ? (0, exports.getPackageString)(pathProto) : packageString;
    return packageStringName
        .split('.')
        .reduce((obj, index) => obj[index], packageObject);
};
exports.getServiceClientFromProto = getServiceClientFromProto;
const configGrpcClient = (remoteServer, protoPath) => {
    const Service = (0, exports.getServiceClientFromProto)(protoPath);
    return new Service(remoteServer, grpc_js_1.credentials.createInsecure());
};
exports.configGrpcClient = configGrpcClient;
//# sourceMappingURL=grpc.js.map