"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Engine = exports.defaultOptions = void 0;
/* eslint-disable @typescript-eslint/restrict-template-expressions */
const fs_1 = __importDefault(require("fs"));
const proto_loader_1 = require("@grpc/proto-loader");
const grpc_js_1 = require("@grpc/grpc-js");
const grpc_js_health_check_1 = __importStar(require("grpc-js-health-check"));
const { GRPC_MAX_BYTES = 64 * 1024 * 1024 } = process.env;
exports.defaultOptions = {
    protos: { keepCase: true },
};
class Engine {
    constructor({ protos } = exports.defaultOptions) {
        this.server = new grpc_js_1.Server({
            'grpc.max_send_message_length': Number(GRPC_MAX_BYTES),
        });
        this.start = (address) => {
            this.server.bindAsync(address, grpc_js_1.ServerCredentials.createInsecure(), () => {
                // eslint-disable-next-line no-console
                console.log(`\n\nðŸš€ Dataserver Plurall magicamente rodando em: ${address}`);
                this.server.start();
            });
        };
        this.setClient = (remoteServer, pathProto) => {
            const GrpcInstance = this.getServiceClientFromProto(pathProto);
            return new GrpcInstance(remoteServer, grpc_js_1.credentials.createInsecure(), {
                'grpc.max_receive_message_length': Number(GRPC_MAX_BYTES),
            });
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.setServices = (services) => {
            // Define service status map. Key is the service name, value is the corresponding status.
            // By convention, the empty string "" key represents that status of the entire server.
            const healthStatusMap = { '': grpc_js_health_check_1.servingStatus.SERVING };
            services.forEach((service) => {
                const serviceNameFromPackage = this.getPackageString(service.proto);
                const { service: grpcService } = this.getServiceClientFromProto(service.proto, serviceNameFromPackage);
                this.server.addService(grpcService, service);
                healthStatusMap[`${serviceNameFromPackage}`] = grpc_js_health_check_1.servingStatus.SERVING;
            });
            // Construct the service implementation
            const healthImpl = new grpc_js_health_check_1.default.Implementation(healthStatusMap);
            // Add the service and implementation to your pre-existing gRPC-node server
            this.server.addService(grpc_js_health_check_1.default.service, healthImpl);
        };
        this.getServiceClientFromProto = (pathProto, packageString = '') => {
            const packageDefinition = (0, proto_loader_1.loadSync)(pathProto, this.protoOptions);
            const packageObject = (0, grpc_js_1.loadPackageDefinition)(packageDefinition);
            const packageStringName = packageString === '' ? this.getPackageString(pathProto) : packageString;
            return packageStringName
                .split('.')
                .reduce((obj, index) => obj[index], packageObject);
        };
        this.getPackageString = (pathProto) => {
            const readProtoService = fs_1.default.readFileSync(pathProto).toString();
            const packageString = [
                `${readProtoService.match(/(?<=package\s)(.*[a-zA-Z0-9])/g)}`,
                `${readProtoService.match(/(?<=service\s)(.*)(?=\s{)/g)}`,
            ].join('.');
            return packageString;
        };
        this.protoOptions = protos;
    }
}
exports.Engine = Engine;
//# sourceMappingURL=engine.js.map